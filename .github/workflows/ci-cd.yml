name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1  # Change to your AWS region
  NODE_ENV: test

jobs:
  # ---------- CI Stage ----------
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U testuser"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        volumes:
          - postgres_data:/var/lib/postgresql/data

    steps:
      - uses: actions/checkout@v4

      # Setup Node
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      # Set up environment variables
      - name: Set up environment
        run: |
          echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV

      # Install + Lint Frontend
      - name: Install & Lint Frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run lint
          npm run build

      # Install + Test Backend
      - name: Install Backend Dependencies
        working-directory: ./http
        run: |
          npm ci
          npx prisma generate

      # Install WebSocket Dependencies
      - name: Install WebSocket Dependencies
        working-directory: ./websocket
        run: npm ci

      # Run tests
      - name: Run Tests
        run: |
          cd http && npm test
          cd ../websocket && npm test

  # ---------- Docker Build & Push Stage ----------
  docker-build-and-push:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'  # Only run on main branch
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.IMAGE_TAG }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate image tag
        id: meta
        run: |
          TAG="v$(date +%Y%m%d)-${GITHUB_SHA::8}"
          echo "IMAGE_TAG=$TAG" >> $GITHUB_OUTPUT
          echo "Generated tag: $TAG"

      - name: Build & Push HTTP Service
        uses: docker/build-push-action@v5
        with:
          context: ./http
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/websocket-ai-http:latest
            ${{ secrets.DOCKER_USERNAME }}/websocket-ai-http:${{ steps.meta.outputs.IMAGE_TAG }}

      - name: Build & Push WebSocket Service
        uses: docker/build-push-action@v5
        with:
          context: ./websocket
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/websocket-ai-ws:latest
            ${{ secrets.DOCKER_USERNAME }}/websocket-ai-ws:${{ steps.meta.outputs.IMAGE_TAG }}

      - name: Build & Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/websocket-ai-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/websocket-ai-frontend:${{ steps.meta.outputs.IMAGE_TAG }}

  # ---------- Deploy to Production ----------
  deploy-to-aws:
    needs: docker-build-and-push
    if: github.ref == 'refs/heads/main'  # Only run on main branch
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to AWS ECS
        run: |
          # Update ECS service with the new task definition
          # This is a placeholder - replace with your actual deployment commands
          echo "Deploying to AWS ECS with image tag: ${{ needs.docker-build-and-push.outputs.image-tag }}"
          # Example command (uncomment and modify as needed):
          # aws ecs update-service \
          #   --cluster your-cluster-name \
          #   --service your-service-name \
          #   --force-new-deployment \
          #   --region ${{ env.AWS_REGION }}

      - name: Update environment variables in production
        env:
          IMAGE_TAG: ${{ needs.docker-build-and-push.outputs.image-tag }}
        run: |
          # This is a placeholder - update with your actual deployment commands
          echo "Updating production environment with image tag: $IMAGE_TAG"
          # Example command (uncomment and modify as needed):
          # aws ssm put-parameter \
          #   --name "/app/IMAGE_TAG" \
          #   --value "$IMAGE_TAG" \
          #   --type "String" \
          #   --overwrite \
          #   --region ${{ env.AWS_REGION }}