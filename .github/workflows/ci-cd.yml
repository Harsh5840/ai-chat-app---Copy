name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1  # Change to your AWS region

jobs:
  # ---------- CI Stage ----------
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      # Setup Node
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      # Install + Lint Frontend
      - name: Install & Lint Frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run lint
          npm run build

      # Install + Test Backend
      - name: Install Backend Dependencies
        working-directory: ./http
        run: |
          npm ci
          npx prisma generate

      # Install WebSocket Dependencies
      - name: Install WebSocket Dependencies
        working-directory: ./websocket
        run: npm ci

      # Run tests if they exist
      - name: Run Tests
        run: |
          echo "Running tests..."
          # Add your test commands here when you have tests
          # cd http && npm test
          # cd websocket && npm test

  # ---------- Docker Build & Push Stage ----------
  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.IMAGE_TAG }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate image tag
        id: meta
        run: |
          TAG="v$(date +%Y%m%d)-${GITHUB_SHA::8}"
          echo "IMAGE_TAG=$TAG" >> $GITHUB_OUTPUT
          echo "Generated tag: $TAG"

      - name: Build & Push HTTP Service
        uses: docker/build-push-action@v5
        with:
          context: ./http
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/websocket-ai-http:latest
            ${{ secrets.DOCKER_USERNAME }}/websocket-ai-http:${{ steps.meta.outputs.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push WebSocket Service
        uses: docker/build-push-action@v5
        with:
          context: ./websocket
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/websocket-ai-ws:latest
            ${{ secrets.DOCKER_USERNAME }}/websocket-ai-ws:${{ steps.meta.outputs.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/websocket-ai-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/websocket-ai-frontend:${{ steps.meta.outputs.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ---------- Deploy to AWS Stage ----------
  deploy-to-aws:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create deployment package
        run: |
          # Create deployment directory
          mkdir -p deploy
          
          # Copy docker-compose and environment files
          cp docker-compose.prod.yml deploy/
          cp .env.production deploy/.env
          
          # Create deployment script
          cat > deploy/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 Starting deployment..."
          
          # Export IMAGE_TAG for docker-compose
          export IMAGE_TAG=${{ needs.docker-build-and-push.outputs.image-tag }}
          
          # Pull latest images
          IMAGE_TAG=$IMAGE_TAG docker-compose -f docker-compose.prod.yml pull
          
          # Stop existing containers
          IMAGE_TAG=$IMAGE_TAG docker-compose -f docker-compose.prod.yml down
          
          # Start new containers
          IMAGE_TAG=$IMAGE_TAG docker-compose -f docker-compose.prod.yml up -d
          
          # Clean up old images
          docker image prune -f
          
          echo "✅ Deployment completed successfully!"
          EOF
          
          chmod +x deploy/deploy.sh

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT || 22 }}
          script: |
            # Create app directory if it doesn't exist
            mkdir -p /home/${{ secrets.AWS_USERNAME }}/websocket-ai-chat
            cd /home/${{ secrets.AWS_USERNAME }}/websocket-ai-chat
            
            # Backup current deployment
            if [ -f docker-compose.prod.yml ]; then
              echo "📦 Creating backup..."
              cp docker-compose.prod.yml docker-compose.backup.yml || true
            fi

      - name: Copy deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT || 22 }}
          source: "deploy/*"
          target: "/home/${{ secrets.AWS_USERNAME }}/websocket-ai-chat/"
          strip_components: 1

      - name: Execute deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT || 22 }}
          script: |
            cd /home/${{ secrets.AWS_USERNAME }}/websocket-ai-chat
            
            # Make sure Docker is running
            sudo systemctl start docker
            
            # Login to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # Run deployment script with IMAGE_TAG exported
            export IMAGE_TAG=${{ needs.docker-build-and-push.outputs.image-tag }}
            chmod +x deploy.sh
            ./deploy.sh
            
            # Verify deployment
            echo "🔍 Verifying deployment..."
            sleep 10
            
            # Check if containers are running
            IMAGE_TAG=$IMAGE_TAG docker-compose -f docker-compose.prod.yml ps
            
            # Test health endpoints
            curl -f http://localhost:3001/health || echo "⚠️  HTTP service health check failed"
            
            echo "🎉 Deployment verification completed!"

      - name: Notify deployment status
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT || 22 }}
          script: |
            cd /home/${{ secrets.AWS_USERNAME }}/websocket-ai-chat
            
            echo "📊 Final deployment status:"
            IMAGE_TAG=${{ needs.docker-build-and-push.outputs.image-tag }} docker-compose -f docker-compose.prod.yml ps
            
            if [ $? -eq 0 ]; then
              echo "✅ All services are running successfully!"
            else
              echo "❌ Some services failed to start"
              exit 1
            fi